source("submitscript1.R")
source("pollutantmean.R")
submit()
submit()
submit()
submit()
submit()
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
submit()
submit()
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/corr_Temp1.R')
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/corr_Temp1.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/corr.R')
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/corr.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/corr.R')
submit()
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
submit
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
paste(c(n, round(cr, 4)), collapse = "\n")
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/complete.R')
submit()
submit()
submit()
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/Test.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/Test.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/Test.R')
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/Test.R')
htmlCode
close(con)
htmlCode[1]
htmlCode[2]
htmlCode[2]
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, UseInternalNodes=T)
library(html)
library("html")
library("HTML")
library("http")
install.packages(html)
install.packages(http)
install.packages("http")
install.packages("httr")
html <- htmlTreeParse(url, UseInternalNodes=T)
library("httr")
html <- htmlTreeParse(url, UseInternalNodes=T)
install.packages("xml")
install.packages("XML")
install.packages("XML")
html <- htmlTreeParse(url, UseInternalNodes=T)
handle("www.google.com")
get(handle=handle("www.google.com") , path="Search")
get(handle=handle("www.google.com") , path="search")
google <- handle("www.google.com")
get(handle=google , path="search")
get(handle=google,path="search")
source('F:/Coursera/R Programming/Week2/ProgrammingAssignments/Test.R')
install.packages("RODBC")
library("RODBC")
library("RODBC")
pass <- "@hmed456"
odbcConnect("172.26.19.89", uid="agad", pwd=pass)
odbcConnect("172.26.19.89", uid="agad", pwd=pass)
library("RODBC")
odbcConnect("172.26.19.89", uid="agad", pwd=pass)
?sqlQuery
con <- odbcConnect("172.26.19.89", uid="agad", pwd=pass)
con
con <- odbcConnect("SQLSTBY", uid="agad", pwd=pass)
con <- odbcConnect("01RIY011895", uid="agad", pwd=pass)
?odbcConnect
con <- odbcConnect("01RIY011895", uid="domain\agad", pwd=pass)
con <- odbcConnect("01RIY011895")
con <- odbcConnect("domain\01RIY011895")
con <- odbcConnect("domain/01RIY011895")
sqlQuery(con, query = "select top 10 * from BIOPERATION..UltraDimTime" )
library(plyr)
df <- data.frame(c(1:100) , NCOL = 4 )
df
df <- data.frame(1:100 , NCOL = 4 )
df
df <- data.frame(1:100 )
df
df <- data.frame(1:100, nrow = 5 )
df
df <- data.frame(1:5, nrow = 5 )
df
df <- data.frame(1:6, nrow = 2 , ncol = 3)
df
df <- data.frame(Name=c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j") , v1=c(1:10) , v2=c(21:30) , v3=c(3, 5, 6, 3, 5, 7, 8, 9, 0, 4))
df
table(df$Name,df$v1)
table(df$Name,df$v3)
df <- data.frame(Name=c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j") , v1=c(1:10) , v2=c(21:30) , v3=c(3, 5, 3, 3, 5, 7, 3, 5, 0, 4))
df
table(df$Name,df$v3)
df <- data.frame(Name=c("a", "b", "c", "b", "a", "f", "a", "h", "i", "a") , v1=c(1:10) , v2=c(21:30) , v3=c(3, 5, 3, 3, 5, 7, 3, 5, 0, 4))
df
table(df$Name,df$v3)
df <- data.frame(Name=c("a", "b", "c", "b", "a", "f", "a", "h", NA, "a") , v1=c(1:10) , v2=c(21:30) , v3=c(3, 5, 3, 3, 5, 7, 3, 5, 0, 4))
df
table(df$Name,df$v3)
df <- data.frame(Name=c("a", "b", "c", "b", "a", "f", "a", "h", NA, "a") , v1=c(1:10) , v2=c(21:30) , v3=c(3, 5, 3, 3, 5, 7, 3, 5, 0, 4), useNA="ifAny")
table(df$Name,df$v3)
table(df$Name,df$v3 , useNA = "ifAny")
table(df$Name,df$v3 , useNA = "ifany")
table(df$v3 > 0)
table(df$v3 > 3)
table(df$v3 >= 3)
df["v3" > 3 ,]
df[,"v3" > 3 ]
df[,"v3" > 3 ]
df[,"v3" > 3 ]
df[[,"v3" > 3 ]]
df[["v3" > 3 ]]
df[df$v3 > 3]
df[df$v3 > 3,]
df[df$v3 = 3,]
df[df$v3 == 3,]
df[df$v3 %in% (3,4),]
df[df$v3 %in% c(3,4),]
object.size(df)
print(object.size(df) , units = "MB" )
print(object.size(df) , units = "KB" )
library(swirl)
swirl
swirl()
/swirl
?swirl
install_from_swirl("Getting and Cleaning Data")
swirl()
ls()
bye()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10, replace = FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(0:1, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10 , mean =  100, sd = 25)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
ys.time() > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars$speed, cars$dist)
plot(cars)
?plot
plot(x= cars$speed, y = cars$dist)
plot(x= cars$dist, y = cars$speed)
plot(x= cars$dist, y = cars$speed , xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed" , ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot" )
plot(cars, sub = "My Plot Subtitle" )
View(cars)
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot( mpg ~ cyl , mtcars)
hist(mtcars$mpg)
swirl()
install.packages(dypler)
install.packages("dypler")
library(dplyr)
head(iris, 1)
iris %>% filter(Species="virginica")%>%print
iris %>% filter(Species=="virginica")%>%print
iris %>% filter(Species=="virginica")%>%summarize(Sepal.Length,mean)
iris %>% filter(Species=="virginica")%>%summarize(Sepal.Length)
?summarize
iris %>% filter(Species=="virginica")%>%summarize(mean=mean(Sepal.Length))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)[3]-sapply(split(mtcars$hp, mtcars$cyl), mean)[1]
next()
nxt()
a
x
swirl()
library(swirl)
swirl()
swirl()
download.file("https://d396qusza40orc.cloudfront.net/rprog%2Fdoc%2FProgAssignment3.pdf" , destfile = "week4assignmentfiles.zip", mode = "wb")
download.file("https://d396qusza40orc.cloudfront.net/rprog%2Fdoc%2FProgAssignment3.pdf" , destfile = "f:/Coursera/R Programming/Week4/HospitalAssignment/week4assignmentfiles.zip", mode = "wb")
download.file("https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2FProgAssignment3-data.zip" , destfile = "f:/Coursera/R Programming/Week4/HospitalAssignment/week4assignmentfiles.zip", mode = "wb")
unzip("f:/Coursera/R Programming/Week4/HospitalAssignment/week4assignmentfiles.zip")
?unzip
echo "Test 123" | mail -s "Test" agad@mol.gov.sa
library(sendmailR)
sendmail("ahmed.e.gad@gmail.com", "ahmed.e.gad@gmail.com", "TestMSG")
install.packages("ODBCR")
install.packages("RODBC")
library(RODBC)
??RODBC
con <- odbcConnect(dsn = DatabaseServer89, uid = agad , pwd = @hmed456 )
con <- odbcConnect(dsn = "DatabaseServer89", uid = "agad" , pwd = "@hmed456" )
query <- sqlQuery(channel = con, query = "select top 10 * from bioperation..ultradimtime")
query
query[1,2]
query[2,2]
query[[2]]
head(query,1)
head(query,1)
head(query[["GWeek"]],1)
head(query[["GDate"]],1)
odbcClose(con)
library(ggplot2)
data(mog)
data(mpg)
qplot(displ,hwy, data = mpg)
mpg
head(mpg)
source('F:/Coursera/Exploratory Data Analysis/Week1/LectExamples/Test.R')
cars
library(lattice)
xyplot(Speed , cars)
xyplot(speed , cars)
head(cars)
xyplot(cars$speed , cars)
xyplot(c(cars$speed, cars$dist) , cars)
xyplot(cars$speed ~ cars$dist , cars)
xyplot(Ozone ~ Wind , data = airquality)
airquality <- transform(airquality , factor(airquality$Month))
xyplot(Ozone ~ Wind , data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1) , col ="Green")
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1) , col ="Green" , ylab = "Ozone", xlab = "Wind")
LatticePlot <- xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1) , col ="Green" , ylab = "Ozone", xlab = "Wind")
LatticePlot <- xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1) , col ="Red" , ylab = "Ozone", xlab = "Wind")
print(LatticePlot)
airquality <- transform(airquality , factor(airquality$Month))
LatticePlot <- xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1) , col ="Red" , ylab = "Ozone", xlab = "Wind")
print(LatticePlot)
airquality <- transform(airquality , factor(Month))
LatticePlot <- xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1) , col ="Red" , ylab = "Ozone", xlab = "Wind")
print(LatticePlot)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each =50)
y<- x+f-f*x+rnorm(100,sd=0.5)
f<- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y~x | f, layout= c(2,1))
xyplot(y~x | f, panel = function(x,y, ....) {
panel.xyplot(x,y)
panel.abline(h = median(y) , lty = 2)
})
xyplot(y~x | f, panel = function(x,y, ....) {
panel.xyplot(x,y)
panel.abline(h = median(y) , lty = 2) # adding a horizontal line at the median
panel.abline(h=lm(x~y))
})
xyplot(y~x | f, panel = function(x,y, ....) {
panel.xyplot(x,y)
panel.abline(h = median(y) , lty = 2) # adding a horizontal line at the median
panel.lmline(h=lm(x~y))
})
xyplot(y~x | f, panel = function(x,y, ....) {
panel.xyplot(x,y)
panel.abline(h = median(y) , lty = 2) # adding a horizontal line at the median
panel.lmline(x,y , col=2))
})
xyplot(y~x | f, panel = function(x,y, ....) {
panel.xyplot(x,y)
panel.abline(h = median(y) , lty = 2) # adding a horizontal line at the median
panel.lmline(x,y , col=2)
})
xyplot(y~x | f, panel = function(x,y, ....) {
panel.xyplot(x,y)
panel.abline(h = median(y) , lty = 2) # adding a horizontal line at the median
panel.lmline(x,y , col=2) # adding reggression line, col =2 means red color for the line color
})
window()
windows()
mosaic(HairEyeColor, shade=TRUE, legend=TRUE)
library(ggplot2)
mosaic(HairEyeColor, shade=TRUE, legend=TRUE)
install.packages("vcd")
mosaic(HairEyeColor, shade=TRUE, legend=TRUE)
library(vcd)
mosaic(HairEyeColor, shade=TRUE, legend=TRUE)
if (!x) {
x=1
}
if (is.na(x)) {
x=1
}
if (exists(x)) {
x=1
}
if (exists("x")) {
x=1
}
if (!exists("x")) {
x=1
}
if (!exists("x")) {
x=2
}
if (exists("x")) {
x=2
}
?mutate
??mutate
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(googleVis)
renderGvis <- function(expr, env=parent.frame(), quoted=FALSE) {
# Convert expr to a function
func <- shiny::exprToFunction(expr, env, quoted)
function() {
chart <- func()
paste(chart$html$chart, collapse="\n")
}
}
renderGvis(1~100)
shiny::exprToFunction(expr, parent.frame(), F)
library(googleVis)
renderGvis <- function(expr, env=parent.frame(), quoted=FALSE) {
# Convert expr to a function
func <- shiny::exprToFunction(expr, env, quoted)
function() {
chart <- func()
paste(chart$html$chart, collapse="\n")
}
}
renderGvis
library(UsingR); data(father.son);
install.packages("UsingR")
ftype(show) # [1] "s4"  "generic"
ftype(lm) # [1] "function"
ftype(colSums) # [1] "internal"
ftype(dgamma) # [1] "function"
library(pryr)
ftype(mean) # [1] "s3"  "generic"
# a generic function in a fresh installation of R,
# with only the default packages loaded
ftype(predict) # [1] "s3" "generic"
# a generic function in a fresh installation of R,
# with only the default packages loaded
ftype(show) # [1] "s4"  "generic"
ftype(lm) # [1] "function"
ftype(colSums) # [1] "internal"
ftype(dgamma) # [1] "function"
library(pryr)
library(shiny)
setwd("f:/Coursera/Developing Data Products/Project/")
runApp()
library(shiny)
library("shiny")
install.packages("shiny")
library("shiny")
setwd("f:/Coursera/Developing Data Products/Project/")
runApp()
library(shiny)
library(shinyapps)
runApp()
library(shiny)
install.packages("Rcpp")
library("shiny")
setwd("f:/Coursera/Developing Data Products/Project/")
runApp()
deployApp()
library("slidify")
setwd("f:/Coursera/Developing Data Products/Project/Files/Developing-Data-Products/")
author("AhmedGad")
setwd("f:/Coursera/Developing Data Products/Project/Files/Developing-Data-Products/")
publish(title = 'Guss the Number', 'index.html', host = 'rpubs')
setwd("F:\Coursera\Developing Data Products\Project\Files\Developing-Data-Products\AhmedGad")
setwd("F:/Coursera/Developing Data Products/Project/Files/Developing-Data-Products/AhmedGad")
publish(title = 'Guss the Number', 'index.html', host = 'rpubs')
publish(title = 'Guss the Number', 'index.html', host = 'rpubs')
publish(user = "A7medGad", repo = "Developing-Data-Products")
publish(user = "A7medGad", repo = "Developing-Data-Products")
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
sudo apt-get install texlive-latex-extra
data(ToothGrowth)
ToothGrowth
boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Growth Data")
?pandoc
pandoc("f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.html", pdf, config = getOption("config.pandoc"), ext = NA,  encoding = getOption("encoding"))
library(knitr)
pandoc("f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.html", pdf, config = getOption("config.pandoc"), ext = NA,  encoding = getOption("encoding"))
render("f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.Rmd", "pdf_document")
?render
library(rmarkdown)
render("f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.Rmd", "pdf_document")
render("f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.Rmd", "pdf_document")
library(rmarkdown)
render("f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.Rmd", "pdf_document")
render("f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.Rmd", pdf_document())
render(f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.Rmd, pdf_document())
render('f:/Coursera/Statistical Inference/Project/BasicInferentialDataAnalysis.Rmd' , pdf_document())
